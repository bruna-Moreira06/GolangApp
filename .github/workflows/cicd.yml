# DOC: https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
name: Build the app docker image

env:
  GO_VERSION: "1.21"

on: push

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      imageName: ${{ steps.versioning.outputs.imageName }}

    steps:
      - uses: actions/checkout@v4
      - name: Compute versions
        id: versioning
        run: |
          version=$(git rev-parse --short HEAD)
          imageName=ghcr.io/${{github.repository}}:$version
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "imageName=$imageName" >> $GITHUB_OUTPUT
          echo "the image name :'$imageName'"
          echo "## 🔖 New version '$version'" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Image '$imageName'" >> $GITHUB_STEP_SUMMARY

  update-version:
    name: 📝 Update version.txt
    runs-on: ubuntu-latest
    needs: versioning
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update version.txt on deploy-dev branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Switch to deploy-dev branch
          git checkout deploy-dev

          # Update version.txt with new version
          echo "${{ needs.versioning.outputs.version }}" > version.txt
          echo "Updated version.txt with version: ${{ needs.versioning.outputs.version }}"

          # Commit and push changes
          git add version.txt
          git commit -m "Update version to ${{ needs.versioning.outputs.version }}" || echo "No changes to commit"
          git push origin deploy-dev

          echo "## 📝 Updated version.txt on deploy-dev branch" >> $GITHUB_STEP_SUMMARY
          echo "New version: ${{ needs.versioning.outputs.version }}" >> $GITHUB_STEP_SUMMARY

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          echo "## 🧪 Running Unit Tests" >> $GITHUB_STEP_SUMMARY
          if [ -d "./test/unit" ]; then
            go test -v ./test/unit/... -coverprofile=unit-coverage.out || echo "No unit tests found"
          else
            echo "No unit test directory found"
            touch unit-coverage.out
          fi

      - name: Run mocked tests
        run: |
          echo "## 🎭 Running Mocked Tests" >> $GITHUB_STEP_SUMMARY
          if [ -d "./test/mocked" ]; then
            go test -v ./test/mocked/... -coverprofile=mocked-coverage.out || echo "No mocked tests found"
          else
            echo "No mocked test directory found"
            touch mocked-coverage.out
          fi

      - name: Run main package tests
        run: |
          echo "## 📦 Running Main Package Tests" >> $GITHUB_STEP_SUMMARY
          go test -v . -coverprofile=main-coverage.out

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage
          path: |
            unit-coverage.out
            mocked-coverage.out
            main-coverage.out

  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    needs: [versioning, unit-tests]

    steps:
      - uses: actions/checkout@v4

      - run: echo "${{secrets.GITHUB_TOKEN}}" | docker login ghcr.io -u "${{github.actor}}" --password-stdin

  api-tests:
    runs-on: ubuntu-latest
    needs: [build-and-push, versioning]

    # Our API server, running in the background
    # services:
    #   backend:
    #     image: ${{needs.versioning.outputs.imageName}}
    #     credentials:
    #       username: ${{github.actor}}
    #       password: ${{secrets.GITHUB_TOKEN}}
    #     ports:
    #     - 8080:8080

    steps:
      - uses: actions/checkout@v4
      - name: API tests
        run: |
          echo "## 🌐 API tests using ${{needs.versioning.outputs.imageName}}" >> $GITHUB_STEP_SUMMARY
